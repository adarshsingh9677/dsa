class Solution {
public:
    bool validPalindrome(string s) {
        int n=s.length(),f=0,k=-1,t=n;
        if(n==2)
            return true;
        for(int i=0,j=n-1;i<j;)
        {
            if(s[i]==s[j])
            {
                i++;j--;
            }
            else
            {
                k=i;
                t=j;
                f=1;
                break;
            }
        }
        if(f==0)
        {
            return true;
        }
        int i,j,x=0;
        if(k==0)
            x=1;
        else
            x=0;
        
        for(i=x,j=n-1;i<j;)
        {
            if(i==k)
            {
                i++;
            }
            else
            {
                if(s[i]==s[j])
                {i++;j--;}
                else
                    break;
            }
            if(i>=j && s[i]==s[j])
                return true;
        }
        if(t==n-1)
        {
            x=n-2;
        }
        else
            x=n-1;
        for(int i=0,j=x;i<j;)
        {
            if(j==t)
            {
                j--;
            }
            else
            {
                if(s[i]==s[j])
                {i++;j--;}
                else
                    break;
            }
            if(i>=j && s[i]==s[j])
                return true;
        }
        return false;
    }
};




//recursive and intuitive
bool ispalindrome(string s,int left,int right,int count)
    {
        if(count>1)
            return false;
        while(left<=right)
        {
            if(s[left]!=s[right])
            {
                return (ispalindrome(s,left+1,right,count+1)||ispalindrome(s,left,right-1,count+1));
            }
            else
            {
                left++;
                right--;
            }
        }
        return true;
        
    }
    
    
    bool validPalindrome(string s) {
        
        int count=0;
        int left=0;
        int right=s.size()-1;
        return ispalindrome(s,left,right,count);
        
    }
