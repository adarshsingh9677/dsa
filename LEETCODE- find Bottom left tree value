/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root,int &x)
    {
        if(root==NULL)
        {
            return;
        }
        queue<TreeNode*> q;
        q.push(root);
        int c=0,curr=1;
        while(!q.empty())
        {
            c=0;
            x=q.front()->val;
            while(!q.empty() && curr--)
            {
                TreeNode* temp=q.front();
                q.pop();
                if(temp->left!=NULL)
                {
                    q.push(temp->left);
                    c++;
                }
                if(temp->right!=NULL)
                {
                    q.push(temp->right);
                    c++;
                }
            }
            curr=c;
        }
    }
    int findBottomLeftValue(TreeNode* root) {
        int x;
        solve(root,x);
        return x;
    }
};
