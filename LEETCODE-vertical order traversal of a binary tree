//DFS
class Solution {
public:
    
    map<int,map<int,vector<pair<int,int>>>> mmmp;
    void solve(TreeNode* root,int c,int r)
    {
        if(root==NULL)
        {
            return;
        }
        mmmp[c][r].push_back(make_pair(r,root->val));
        solve(root->left,c-1,r+1);
        solve(root->right,c+1,r+1);
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> v;
        if(root==NULL)
        {
            return v;
        }
        int c=0,r=0;
        solve(root,c,r);
        for(auto y:mmmp)
        {
            vector<int>k;
            for(auto x:y.second)
            {
                sort(x.second.begin(),x.second.end());
                for(auto z:x.second)
                {
                    k.push_back(z.second);
                }
            }
            v.push_back(k);
        }
        return v;
    }
};
//
//
//
//
//


//BFS
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>>v;
        if(root==NULL)
        {
            return v;
        }
        map<int,map<int,vector<int>>> mmp;
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        int curr=1,c=0,k=0;
        while(!q.empty())
        {
            c=0;
            while(!q.empty() && curr--)
            {
                TreeNode*temp=q.front().first;
                int x=q.front().second;
                q.pop();
                mmp[x][k].push_back(temp->val);
                if(temp->left!=NULL)
                {
                    q.push({temp->left,x-1});
                    c++;
                }
                if(temp->right!=NULL)
                {
                    q.push({temp->right,x+1});
                    c++;
                }
            }
            curr=c; 
            k++;
        }
        
        for(auto it1:mmp)
        {
            vector<int> vt;
            for(auto it2:it1.second)
            {
                sort(it2.second.begin(),it2.second.end());
                {
                    for(auto p:it2.second)
                    {
                        vt.push_back(p);
                    }
                }
            }
            v.push_back(vt);
        }
        return v;
    }
};
